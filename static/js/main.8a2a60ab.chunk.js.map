{"version":3,"sources":["Counter.js","App.js","index.js"],"names":["Counter","props","state","count","tap","amount","cost","multiplier","auto","random","result","setInterval","isOverStackTap","isOverStackAuto","warntap","document","getElementById","warnauto","style","display","setState","Number","toFixed","addEventListener","e","increment","this","alert","rand","Math","className","onClick","upgrade","id","color","React","Component","App","ReactDOM","render"],"mappings":"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","file":"static/js/main.8a2a60ab.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Counter.css';\r\n\r\nclass Counter extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            count: 10000,\r\n            tap: {\r\n                amount: 1,\r\n                cost: 100,\r\n                multiplier: 1,\r\n            },\r\n            auto: {\r\n                amount: 0,\r\n                cost: 1000,\r\n                multiplier: 1\r\n            },\r\n            random: {\r\n                amount: 0,\r\n                cost: 5000,\r\n                result: 0\r\n            }\r\n        };\r\n\r\n        setInterval(() => {\r\n            var isOverStackTap = this.state.count >= this.state.tap.cost * 3;\r\n            var isOverStackAuto = this.state.count >= this.state.auto.cost * 2;\r\n            var warntap = document.getElementById(\"warntap\");\r\n            var warnauto = document.getElementById(\"warnauto\");\r\n\r\n            warntap.style.display = isOverStackTap ? 'inline' : 'none';\r\n            warnauto.style.display = isOverStackAuto ? 'inline' : 'none';\r\n\r\n            this.setState({\r\n                count: Number((this.state.count + this.state.auto.amount * this.state.auto.multiplier).toFixed(2)),\r\n                tap: {\r\n                    amount: this.state.tap.amount,\r\n                    cost: this.state.tap.cost,\r\n                    multiplier: (isOverStackTap ? 0.5 : 1)\r\n                },\r\n                auto: {\r\n                    amount: this.state.auto.amount,\r\n                    cost: this.state.auto.cost,\r\n                    multiplier: (isOverStackAuto ? 0.5 : 1)\r\n                }\r\n            })\r\n        }, 100);\r\n\r\n        document.addEventListener('click', e => this.increment());\r\n    }\r\n\r\n    increment() {\r\n        this.setState({\r\n            count: this.state.count + this.state.tap.amount * this.state.tap.multiplier\r\n        });\r\n    };\r\n\r\n    upgrade() {\r\n        if (this.state.count >= this.state.tap.cost) {\r\n            this.setState({\r\n                count: this.state.count - this.state.tap.cost,\r\n                tap: {\r\n                    amount: this.state.tap.amount + 1,\r\n                    cost: Number((this.state.tap.cost * 1.30).toFixed(0)),\r\n                    multiplier: this.state.tap.multiplier\r\n                }\r\n            })\r\n        } else {\r\n            alert(`not enough count to upgrade! : ${this.state.tap.cost} count`);\r\n        }\r\n    }\r\n\r\n    auto() {\r\n        if (this.state.count >= this.state.auto.cost) {\r\n            this.setState({\r\n                count: this.state.count - this.state.auto.cost,\r\n                auto: {\r\n                    amount: this.state.auto.amount + 0.1,\r\n                    cost: Number((this.state.auto.cost * 1.75).toFixed(0)),\r\n                    multiplier: this.state.auto.multiplier\r\n                }\r\n            })\r\n        } else {\r\n            alert(`not enough count to ${this.state.auto.amount > 0 ? 'upgrade' : 'buy'}! : ${this.state.auto.cost} count`);\r\n        }\r\n    }\r\n\r\n    random() {\r\n        if (this.state.count >= this.state.random.cost) {\r\n            var rand = Math.random();\r\n            var result = Number(((rand > 0.5 ? -1 : rand < 0.5 ? 1 : 0) * Math.random() * this.state.random.cost).toFixed(2));\r\n            this.setState({\r\n                count: this.state.count + (this.state.random.amount === 0 ? -this.state.random.cost : result),\r\n                random: {\r\n                    amount: 1,\r\n                    cost: 1000,\r\n                    result: this.state.random.amount === 0 ? 0 : result\r\n                }\r\n            })\r\n        } else {\r\n            alert(`not enough count to ${this.state.random.amount > 0 ? 'buy' : 'start'}! : ${this.state.random.cost} count`);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        var { count, tap, auto, random } = this.state;\r\n        return (\r\n            <div>\r\n                <h1>Count: {count}</h1>\r\n                <button className='ripple' onClick={(e) => this.upgrade(e)}>\r\n                    <b>SELF TAP</b><br />\r\n                    Upgrade: {tap.amount} -&gt; {tap.amount + 1}<br />\r\n                    Cost: {tap.cost}</button>\r\n                <button className='ripple' onClick={(e) => this.auto(e)}>\r\n                    <b>Auto Tap</b><br />\r\n                    {auto.amount > 0 ? \"Upgrade\" : 'Buy'}: {Number((auto.amount * 10).toFixed(1))}/s -&gt; {Number(((auto.amount + 0.1) * 10).toFixed(1))}/s<br />\r\n                    Cost: {auto.cost}</button>\r\n                <button className='ripple' onClick={(e) => this.random(e)}>\r\n                    <b>Random</b><br />\r\n                    {random.amount > 0 ? \"Start\" : 'Buy'}<br />\r\n                    Cost: {random.cost}<br />\r\n                    you got: {random.result}</button><br />\r\n                <span id=\"warntap\" color=\"red\">Warning: you have too many counts. self-tap efficient is decreased to <b>{this.state.tap.multiplier * 100}%</b>({this.state.tap.amount * this.state.tap.multiplier})</span><br />\r\n                <span id=\"warnauto\" color=\"red\">Warning: you have too many counts. auto-tap efficient is decreased to <b>{this.state.tap.multiplier * 100}%</b>({Number((this.state.auto.amount * 10).toFixed(1)) * this.state.auto.multiplier})</span>\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\n\r\n\r\nexport default Counter;","import React from 'react';\nimport Counter from './Counter';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div>\n        <Counter />\n      </div>\n    )\n  }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}